Lecture 19    Template Method Pattern / C++ Templates


=== Template Method Pattern ===

					 |---------|
					 | Sort    |
					 |---------|
					 |---------| ----|
					 |+sort()  |	 |
					 |-input() |	 |---> not virtual
					 |-output()|	 |
					 |---------| ----|
					 |-doSort()| ----> pure virtual
					 |---------|
						↑
						|
		    |-----------------------|
		|---------|			    |---------|
		| Merge   |				| Bubble  |
		|---------|				|---------|
		|-doSort()|				|-doSort()|
		|---------|				|---------|

		void Sort() {
			this->input();
			this->doSort();
			output();
		}
		Sort *s = new Merge;
		s->sort();

							|-------|
							| Enemy |
							|-------|
								↑
								|
				    |-----------------------|
				|--------|			    |--------|
				| Turtle |				| Bullet |
				|--------|				|--------|
					↑
			|---------------|
		 |-----|		|-------|
		 | red |		| Green |
		 |-----|		|-------|

		 class Turtle : public Enemy {
		 	public:
		 		void draw() {     ---|
		 			drawHead();   	 |
		 			drawShell();	 |---> non-virtual
		 			drawTail();		 |
		 		}				  ---|
		 	private:
		 		void drawHead() {......}
		 		void drawTail() {......}
		 		virtual void drawShell() = 0;
		 };
		 class Red : public Turtle {
		 	void drawShell() {
		 		// draw red shell;
		 	}
		 }

=== C++ Templates ===
		class Node {
				int data;
				Node *next;
			public:
				Node(int data, Node *next): ......{}
				int getData() const { return data; }
				void setNext(Node *n) { next = n; }
		};
	Template class: generalizing a class by parameterizing on one or more types.
		template <typename T> class Node {
				T data;
				Node<T> *next;
			public:
				Node(T data, Node<T> *next): data(data), next(next) {}
				T getData() const { return data; }
				void setNext(Node<T> *n) { next = n; }
		};
		Node<int> *intList = new Node<int>(1, new Node<int>(2, NULL));
		Node<char> *charList = new Node<char>('a', new Node<char>('b', NULL));
		Node<Node<int>> *ListOFLists;

=== Standard Template Library === <STL>
	~ Dynamic Resizing Array: std::vector
			#include <vector>

			using namespace std;

			int main() {
				Vector<int> v;
				v.push_back(1);
				v.push_back(2);
				v.push_back();
				for (int i = 0; i < v.size(); ++i) {
					cout << v[i] << endl; // no range checked
					cout << v.at[i] << endl; // range checked
				}
			}

		Cool CS136 way of iterating over an array
			for (int *p=arr; p < arr+size; ++p) {
				cout << *p << endl;
			}
		Super cool CS246 array
			for (vector<int>::iterator it = v.begin(); it != v.end(); ++it) {
				cout << *it << endl;
			}
		Iterator is an abstraction for a pointer
			for (vector<int>::reverse_iterator it = v.rbegin; it != v.rend(); ++it) {
				cout << *it << endl;
			}
							Vector
					|-------------------|
					↓					↓
			|---|---|---|---|---|---|---|---|---|
			|	|	|///|///|///|///|///|	|	|
			|	|	|///|///|///|///|///| 	|	|
			|	|	|///|///|///|///|///|	|	|
			|	|	|///|///|///|///|///|	|	|
			|---|---|---|---|---|---|---|---|---|
				↑	↑				↑	↑
			v.rend	v.begin	  v.rbegin	v.end	

			v.erase(v.begin());
			v.erase(v.begin()-1);
			v.erase(v.rbegin());

	~ std::map
		Array
		Key -> Value
	   (int)	(T)
	   	 T       V
	   		map<string, int> myMap;
	   		myMap["abc"] = 5;
	   		myMap["abc"] = 10;
	   		cout << myMap["abc"] << endl;
	   		if (myMap.count("abc")) {
	   			// 0 if not found
	   			// 1 if found
	   		}
	   		for (map<string, int>::iterator it = myMap.begin(); it != myMap.end(); ++it) {
	   			(*it).first;
	   			(*it).second;
	   		}
	   		